name: Actualizar Proyecto al Crear PR

on:
  pull_request:
    types: [opened]

jobs:
  add_pr_to_project:
    runs-on: ubuntu-latest
    steps:
      - name: Obtener información del PR
        uses: actions/github-script@v6
        id: get_pr_info
        with:
          script: |
            const pr = context.payload.pull_request;
            const projectId = "${{ vars.GITHUB_PROJECT_ID }}"; // ID de tu proyecto GitHub
            const columnId = "${{ vars.GITHUB_PROJECT_COLUMN_ID }}"; // ID de la columna donde quieres agregar los PRs

            const issueNumberRegex = /#(\d+)/; // Corrección: usa \d en lugar de d
            const issueMatch = pr.body.match(issueNumberRegex);
            let issueNumber;
            if (issueMatch) {
              issueNumber = issueMatch[1];
            }

            let linkedIssueNodeId = null;
            if (issueNumber) {
              const query = `
                query {
                  repository(owner: "${context.repo.owner}", name: "${context.repo.repo}") {
                    issue(number: ${issueNumber}) {
                      nodeId
                    }
                  }
                }
              `;
              const result = await github.graphql(query);
              if (result && result.repository && result.repository.issue) {
                linkedIssueNodeId = result.repository.issue.nodeId;
              }
            }

            core.setOutput('pr_node_id', pr.node_id);
            core.setOutput('linked_issue_node_id', linkedIssueNodeId);

      - name: Añadir PR a proyecto
        uses: actions/github-script@v6
        with:
          script: |
            const prNodeId = "${{ steps.get_pr_info.outputs.pr_node_id }}";
            const linkedIssueNodeId = "${{ steps.get_pr_info.outputs.linked_issue_node_id }}";
            const projectId = "${{ vars.GITHUB_PROJECT_ID }}";
            const columnId = "${{ vars.GITHUB_PROJECT_COLUMN_ID }}";

            let itemNodeId;

            if (linkedIssueNodeId !== "null") {
                const searchItemQuery = `
                    query {
                      node(id: "${linkedIssueNodeId}") {
                         ... on Issue{
                            projectItems(first: 10, query: {projectId: "${projectId}"}) {
                               nodes {
                                    id
                                }
                           }
                         }
                     }
                    }
                `;
              const searchResult = await github.graphql(searchItemQuery);
              if (searchResult && searchResult.node && searchResult.node.projectItems && searchResult.node.projectItems.nodes.length > 0) {
                 itemNodeId = searchResult.node.projectItems.nodes[0].id;
              }
            }


            if (!itemNodeId) {
                const addItemMutation = `
                    mutation {
                      addProjectV2ItemById(
                        input: {
                          projectId: "${projectId}"
                          contentId: "${prNodeId}"
                        }
                      ) {
                        item {
                          id
                        }
                      }
                    }
                `;
                const addItemResult = await github.graphql(addItemMutation);
                if (addItemResult && addItemResult.addProjectV2ItemById && addItemResult.addProjectV2ItemById.item) {
                   itemNodeId = addItemResult.addProjectV2ItemById.item.id;
                }
            }

            if(itemNodeId){
                const moveItemMutation = `
                    mutation {
                      updateProjectV2ItemFieldValue(
                        input: {
                          projectId: "${projectId}"
                          itemId: "${itemNodeId}"
                          fieldId: "status"
                          value: {
                            singleSelectOptionId: "${columnId}"
                          }
                        }
                      ) {
                        projectV2Item {
                          id
                        }
                      }
                    }
                `;
              await github.graphql(moveItemMutation);
            }
